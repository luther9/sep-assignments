1. O(1). It doesn't do anything multiple times.

2. O(n). It has to visit each element once.

3. O(n*m). The program must vist each item once in a 2D array.

4. O(2^n). It makes 2 recursive calls for every step.

5. O(n). By keeping track of the loop state, it only has to iterate *n* times.

6. O(n^2). If the pivot turns out to be the biggest or smallest item, then only
one recursive call does any work, and it has to iterate through the entire
unsorted array. With reasonable precautions, we usually get O(n log n).
